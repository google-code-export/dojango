#summary Help - How to enable Dojo's form functionality in dojango.

Since version 0.4 dojango provides the capability to use Dojo form elements the same as you would use normal forms in Django. All form fields, widgets and other form functionality that is available in Django (e.g. model forms, formsets, ...) is now implemented (extended) within dojango. If you would like to enhance your normal django forms with more enhanced Dojo form elements, you now just simply have to import the forms library from dojango:

{{{
# instead of
# from django.forms import *
# do this:
from dojango.forms import *
}}}

Note: The form integration just works with *Django version >= 1.0.2*

To use the form integration, you first have to follow the GettingStarted guide and additionaly you have enable the following middleware in your settings.py:

{{{
MIDDLEWARE_CLASSES = (
    'dojango.middleware.DojoCollector',
    # (not named DojoAutoRequireMiddleware anymore!)
    // ...
)
}}}

This middleware initializes a collector module for the current request thread, where each individual widget can add its used modules. All collected modules of one request are then available in the template context *DOJANGO.COLLECTOR*. If you extend your template from `dojango/base.html` or `dojango/base_i18n.html` you don't have to care about it. Just generate your dojango form and place it in the template block *dojango_content*:

{{{
{% extends "dojango/base.html" %}
{% block dojango_content %}
    {# PLACE YOUR FORMS HERE #}
{% endblock %}
}}}

If you use `include.html` or `include_i18n.html` you have to deal with the Dojo collector in your template on your own:

{{{
<script type="text/javascript">
    {% for require in DOJANGO.COLLECTOR %}
        dojo.require("{{ require }}");
    {% endfor %}		
</script>
}}}

= Form fields and widgets =

The main difference between the Django form fields and the Dojango ones is, that all validation attributes are passed to the widgets. Dojo's form elements can also validate individual form elements in the browser and dojango just populates the validation of the form fields to each widget. Thus the following possible form field attributes are forwarded to the assigned widget:

  * required
  * help_text
  * min_value
  * max_value
  * max_length
  * max_digits
  * decimal_places
  * js_regex

The widget itself then decides, how each attribute is assigned to the Dojo widget. In the following table you see, which widget is assigned as default to a form field and which validation parameters are possible within that form field:

||**dojango.forms.fields**||**dojango.forms.widgets**||**possible parameters**||
||CharField||ValidationTextInput||required, help_text, max_length, min_length||
||ChoiceField||Select||required, help_text||
||TypedChoiceField||Select||required, help_text||
||IntegerField||NumberTextInput||required, help_text, max_value, min_value||
||BooleanField||CheckboxInput||required, help_text||
||FileField||FileInput||required, help_text||
||ImageField||FileInput||required, help_text||
||DateField||DateInput||required, help_text, min_value, max_value||
||TimeField||TimeInput||required, help_text, min_value, max_value||
||DateTimeField||DateTimeInput||required, help_text, min_value, max_value||
||SplitDateTimeField||DateTimeInput||required, help_text, min_value, max_value||
||RegexField||ValidationTextInput||required, help_text, js_regex||
||DecimalField||NumberTextInput||required, help_text, max_value, min_value, max_digits, decimal_places||
||FloatField||ValidationTextInput||required, help_text, max_value, min_value||
||FilePathField||Select||required, help_text||
||MultipleChoiceField||SelectMultiple||required, help_text||
||NullBooleanField||NullBooleanSelect|| ||
||EmailField||EmailTextInput||required, help_text||
||IPAddressField||IPAddressTextInput||required, help_text||
||URLField||URLTextInput||required, help_text||
||SlugField||ValidationTextInput||required, help_text||

= Django widgets utilizing Dojo widgets =

== Overwritten Django's default widgets ==

||**Django widget**||**Dojo widget**||**Field attribute => Widget attribute**||**Notes**||
||Widget||dijit.form.Widget|| || ||
||Input||none|| || ||
||TextInput||dijit.form.TextBox||max_length => maxLength|| ||
||PasswordInput||dijit.form.TextBox||max_length => maxLength|| ||
||HiddenInput||dijit.form.TextBox|| || ||
||MultipleHiddenInput||dijit.form.TextBox|| || ||
||FileInput||dojox.form.FilenInput|| ||additional CSS: dojox/form/resources/FileInput.css||
||Textarea||dijit.form.Textarea||max_length => maxLength|| ||
||DateInput||dijit.form.DateTextBox||required => required<br>help_text => promptMessage<br>min_value => constraints["min"]<br>max_value => constraints["max"]|| ||
||TimeInput||dijit.form.TimeTextBox||required => required<br>help_text => promptMessage<br>min_value => constraints["min"]<br>max_value => constraints["max"]|| ||
||CheckboxInput||dijit.form.CheckBox|| || ||
||Select||dijit.form.FilteringSelect||required => required<br>help_text => promptMessage|| ||
||NullBooleanSelect||dijit.form.FilteringSelect|| || ||
||SelectMultiple||dijit.form.MultiSelect|| || ||
||RadioInput|| || ||identical to Django's RadioInput||
||RadioFieldRenderer|| || ||identical to Django's RadioInput||
||RadioSelect||dijit.form.RadioButton|| || ||
||CheckboxSelectMultiple||dijit.form.CheckBox|| || ||
||MultiWidget||none|| || ||
||SplitDateTimeWidget|| || ||using DateInput and TimeInput||
||DateTimeInput|| || ||same as SplitDateTimeWidget||
||SplitHiddenDateTimeWidget||dijit.form.TextBox|| || ||

== Additional widgets ==

||**Django widget**||**Dojo widget**||**Field attribute => Widget attribute**||**Notes**||
||SimpleTextarea||dijit.form.SimpleTextarea||max_length => maxLength|| ||
||EditorInput||dijit.Editor|| || ||
||HorizontalSliderInput||dijit.form.HorizontalSlider||min_value => minimum<br>max_value => maximum|| ||
||VerticalSliderInput||dijit.form.VerticalSlider||min_value => minimum<br>max_value => maximum|| ||
||ValidationTextInput||dijit.form.ValidationTextBox||required => required<br>help_text => promptMessage<br>js_regex => regExp<br>max_length => maxLength|| ||
||ValidationPasswordInput||dijit.form.ValidationTextBox||required => required<br>help_text => promptMessage<br>js_regex => regExp<br>max_length => maxLength|| ||
||EmailTextInput||dijit.form.ValidationTextBox||required => required<br>help_text => promptMessage<br>js_regex => regExp<br>max_length => maxLength||using the following regex: dojox.validate.regexp.emailAddress||
||IPAddressTextInput||dijit.form.ValidationTextBox||required => required<br>help_text => promptMessage<br>js_regex => regExp<br>max_length => maxLength||using the following regex: dojox.validate.regexp.ipAddress||
||URLTextInput||dijit.form.ValidationTextBox||required => required<br>help_text => promptMessage<br>js_regex => regExp<br>max_length => maxLength||using the following regex: dojox.validate.regexp.url||
||NumberTextInput||dijit.form.NumberTextBox||required => required<br>help_text => promptMessage<br>min_value => constraints["min"]<br>max_value => constraints["max"]<br>decimal_places => constraints["places"]|| ||
||RangeBoundTextInput||dijit.form.RangeBoundTextBox||required => required<br>help_text => promptMessage<br>min_value => constraints["min"]<br>max_value => constraints["max"]<br>decimal_places => constraints["places"]|| ||
||NumberSpinnerInput||dijit.form.NumberSpinner||required => required<br>help_text => promptMessage<br>min_value => constraints["min"]<br>max_value => constraints["max"]<br>decimal_places => constraints["places"]|| ||
||RatingInput||dojox.form.Rating||max_value => numStars|| ||
||DateInputAnim||dijit.form.DateTextBox||required => required<br>help_text => promptMessage<br>min_value => constraints["min"]<br>max_value => constraints["max"]||additional CSS: dojox/widget/Calendar/Calendar.css||
||DropDownSelect||dojox.form.DropDownSelect||required => required<br>help_text => promptMessage||additional CSS: dojox/form/resources/DropDownSelect.css||
||CheckedMultiSelect||dojox.form.CheckedMultiSelect||required => required<br>help_text => promptMessage||additional CSS: dojox/form/resources/CheckedMultiSelect.css. The option _multiple_ can't be used on that widget.||